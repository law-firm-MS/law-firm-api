@page "/login"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using LawFirm.SuperAdminPortal.Services
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav

<h3>Super Admin Login</h3>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@Error</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>
    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string? Error;

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        Error = null;
        try
        {
            var response = await Http.PostAsJsonAsync("/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await ((JwtAuthenticationStateProvider)AuthProvider).MarkUserAsAuthenticated(result.Token);
                    Nav.NavigateTo("/");
                }
                else
                {
                    Error = "Invalid response from server.";
                }
            }
            else
            {
                Error = "Invalid credentials.";
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    public class LoginResult
    {
        public string Token { get; set; } = string.Empty;
    }
} 